<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.catstagram.mapper.MemberMapper">
	<!-- 아이디 중복 검사 -->
	<select id="idCheck" parameterType="String" resultType="String">
		select member_id from catstagram_member where member_id = #{id}
	</select>
	
	<!-- 회원가입 -->
	<insert id="signup" parameterType="com.catstagram.member.model.MemberDTO">
		insert into
			catstagram_member
		values
			(catstagram_member_idx.nextval, #{member_id}, #{member_name}, #{member_pwd}, '', '', '', sysdate, 'n')
	</insert>
	
	<!-- 로그인 -->
	<select id="login" parameterType="String" resultType="com.catstagram.member.model.MemberDTO">
		select member_idx, member_pwd, member_quit from catstagram_member where member_id = #{id}
	</select>
	
	<!-- 세션 정보 -->
	<select id="sessionInfo" parameterType="String" resultType="com.catstagram.member.model.MemberDTO">
		select member_idx, member_id, member_name, member_img from catstagram_member where member_id = #{id}
	</select>
	
	<!-- 회원 검색시 리스트 조회 -->
	<select id="searchList" parameterType="Map" resultType="com.catstagram.member.model.MemberDTO">
		select
			member_idx, member_id, member_name, member_img,
			(select follow_idx from catstagram_follow where member_to = member_idx and member_from = #{sidx}) is_follow
		from catstagram_member
		where
			member_id like '%'||#{search_id}||'%' and member_id <![CDATA[<>]]> #{sid}
		order by
			is_follow nulls last
	</select>
	
	<!-- 이미 저장된 프로필 불러오기 -->
	<select id="profileInfo" parameterType="Integer" resultType="String">
		select member_intro from catstagram_member where member_idx = #{member_idx}
	</select>
	
	<!-- 프로필 수정 -->
	<update id="profileUpdate" parameterType="com.catstagram.member.model.MemberDTO">
		update catstagram_member set member_intro = #{member_intro} where member_idx = #{member_idx}
	</update>
	
	<!-- 프로필 이미지 변경 -->
	<update id="profileImgUpdate" parameterType="com.catstagram.member.model.MemberDTO">
		update catstagram_member set member_img = #{member_img} where member_idx = #{member_idx}
	</update>
	
	<!-- 회원 정보 수정 -->
	<update id="infoUpdate" parameterType="com.catstagram.member.model.MemberDTO">
		update catstagram_member
		set member_id = #{member_id}, member_name = #{member_name}
		where member_idx = #{member_idx}
	</update>
	
	<!-- 비밀번호 확인(회원 정보 수정에서) -->
	<select id="pwdChk" parameterType="Integer" resultType="String">
		select member_pwd from catstagram_member where member_idx = #{sidx}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="pwdUpdateOk" parameterType="com.catstagram.member.model.MemberDTO">
		update catstagram_member set member_pwd = #{member_pwd} where member_idx = #{member_idx}
	</update>
	
	<!-- 회원탈퇴 -->
	<update id="quit" parameterType="Integer">
		update catstagram_member set member_quit = 'y' where member_idx = #{sidx}
	</update>
	
	<!-- 팔로워 목록(나를 친구 추가한 사람) -->
	<select id="followerList" parameterType="Integer" resultType="com.catstagram.member.model.MemberDTO">
		select
			m.member_idx, m.member_id, m.member_name, m.member_img
		from
			catstagram_follow f, catstagram_member m
		where
			f.member_from = m.member_idx and f.member_to = #{sidx}
	</select>
	
	<!-- 팔로잉 목록(내가 친구 추가한 사람) -->
	<select id="followingList" parameterType="Integer" resultType="com.catstagram.member.model.MemberDTO">
		select
			m.member_idx, m.member_id, m.member_name, m.member_img
		from
			catstagram_follow f, catstagram_member m
		where
			f.member_to = m.member_idx and f.member_from = #{sidx}
	</select>
	
	<!-- 회원들의 Catstagram 주소로 이동하기 위한 idx와 아이디, 그 외 정보들 조회 -->
	<select id="urlIdxIdSelect" resultType="com.catstagram.member.model.MemberDTO" parameterType="Map">
		select 
			m.member_idx, m.member_id, m.member_name, m.member_intro, m.member_img,
			(select count(*) from catstagram_feed where member_idx = m.member_idx) feed_count,
			(select count(*) from catstagram_follow where member_from = m.member_idx) following_count,
			(select count(*) from catstagram_follow where member_to = m.member_idx) follower_count,
			(select follow_idx from catstagram_follow where member_to = m.member_idx and member_from = #{sidx}) is_follow
		from 
			catstagram_member m
		where
			m.member_id = #{member_id}
	</select>
	
	<!-- 회원들의 팔로워 & 팔로잉 목록으로 이동하기 위한 idx와 아이디 조회 -->
	<select id="followListOtherInfo" resultType="com.catstagram.member.model.MemberDTO" parameterType="String">
		select member_idx, member_id from catstagram_member where member_id = #{member_id}
	</select>
	
	<!-- 다른 회원의 팔로워 목록 -->
	<select id="otherFollowerList" resultType="com.catstagram.member.model.MemberDTO" parameterType="Map">
		select
			m.member_idx, m.member_id, m.member_name, m.member_img,
			(select follow_idx from catstagram_follow where member_to = member_idx and member_from = #{sidx}) is_follow
		from
			catstagram_follow f, catstagram_member m
		where
			f.member_from = m.member_idx and f.member_to = #{member_idx}
		order by
			case when m.member_idx = #{sidx} then 0 else 1 end, is_follow nulls last
	</select>
	
	<!-- 다른 회원의 팔로잉 목록 -->
	<select id="otherFollowingList" resultType="com.catstagram.member.model.MemberDTO" parameterType="Map">
		select
			m.member_idx, m.member_id, m.member_name, m.member_img,
			(select follow_idx from catstagram_follow where member_to = member_idx and member_from = #{sidx}) is_follow
		from
			catstagram_follow f, catstagram_member m
		where
			f.member_to = m.member_idx and f.member_from = #{member_idx}
		order by
			case when m.member_idx = #{sidx} then 0 else 1 end, is_follow nulls last
	</select>
	
	<!-- Header의 알림 목록 -->
	<select id="alarmList" parameterType="Integer" resultType="com.catstagram.etc.model.AlarmDTO">
		select * from ( 
			select 'follow' as activity_type, m.member_id, f.follow_idx, null as feed_idx, null as feed_img, null as feed_like_idx, null as comment_idx, 
			null as comment_content, null as comment_like_idx, f.follow_date as alarm_date, trunc((sysdate-f.follow_date) * 24 * 60) as alarm_date_minute
			from catstagram_member m, catstagram_follow f
			where f.member_to = #{sidx} 
			and m.member_idx = f.member_from
			
			union all
			
			select 'feedLike' as activity_type, m.member_id, null as follow_idx, fe.feed_idx, fe.feed_img, fl.feed_like_idx, null as comment_idx,
			null as comment_content, null as comment_like_idx, fl.feed_like_date as alarm_date, trunc((sysdate-fl.feed_like_date) * 24 * 60) as alarm_date_minute
			from catstagram_member m, catstagram_feed fe, catstagram_feed_like fl
			where fe.member_idx = #{sidx}
			and m.member_idx = fl.member_idx
			and fe.feed_idx = fl.feed_idx
			and fl.member_idx <![CDATA[<>]]> #{sidx} 
			
			union all 
			
			select 'comment' as activity_type, m.member_id, null as follow_idx, fe.feed_idx, fe.feed_img, null as feed_like_idx, c.comment_idx, 
			c.comment_content, null as comment_like_idx, c.comment_date as alarm_date, trunc((sysdate-c.comment_date) * 24 * 60) as alarm_date_minute
			from catstagram_member m, catstagram_feed fe, catstagram_comment c
			where fe.member_idx = #{sidx}
			and m.member_idx = c.member_idx
			and fe.feed_idx = c.feed_idx
			and c.member_idx <![CDATA[<>]]> #{sidx}
			
			union all
			
			select 'commentLike' as activity_type, m.member_id, null as follow_idx, fe.feed_idx, fe.feed_img, null as feed_like_idx, c.comment_idx, 
			c.comment_content, cl.comment_like_idx, cl.comment_like_date as alarm_date, trunc((sysdate-cl.comment_like_date) * 24 * 60) as alarm_date_minute
			from catstagram_member m, catstagram_feed fe, catstagram_comment c, catstagram_comment_like cl
			where m.member_idx = cl.member_idx
			and c.feed_idx = fe.feed_idx
			and cl.member_idx <![CDATA[<>]]> #{sidx}
			and c.member_idx = #{sidx}
			and cl.member_idx = m.member_idx
			and c.comment_idx = cl.comment_idx
			order by alarm_date desc
		) where rownum <![CDATA[<=]]> 40
	</select>
	
	<!-- 내가 본 알림들 중 마지막 알림의 시간 -->
	<select id="lastAlarmTime" parameterType="Integer" resultType="java.util.Date">
		select * from (
			select f.follow_date as alarm_date
			from catstagram_member m, catstagram_follow f
			where f.member_to = #{sidx} 
			and m.member_idx = f.member_from
			
			union all
			select fl.feed_like_date as alarm_date
			from catstagram_member m, catstagram_feed fe, catstagram_feed_like fl
			where fe.member_idx = #{sidx}
			and m.member_idx = fl.member_idx
			and fe.feed_idx = fl.feed_idx
			and fl.member_idx <![CDATA[<>]]> #{sidx}
			
			union all 
			select c.comment_date as alarm_date
			from catstagram_member m, catstagram_feed fe, catstagram_comment c
			where fe.member_idx = #{sidx}
			and m.member_idx = c.member_idx
			and fe.feed_idx = c.feed_idx
			and c.member_idx <![CDATA[<>]]> #{sidx}
			
			union all
			select cl.comment_like_date as alarm_date
			from catstagram_member m, catstagram_feed fe, catstagram_comment c, catstagram_comment_like cl
			where m.member_idx = cl.member_idx
			and c.feed_idx = fe.feed_idx
			and cl.member_idx <![CDATA[<>]]> #{sidx}
			and c.member_idx = #{sidx}
			and cl.member_idx = m.member_idx
			and c.comment_idx = cl.comment_idx
			order by alarm_date desc
		) where rownum = 1
	</select>
</mapper>